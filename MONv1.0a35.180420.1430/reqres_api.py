import sys
import os
import urllib.request
import json
import pefile

inputFile = sys.argv[1]
    
inputFileString = inputFile.replace('%20', ' ')

try:
    pe = pefile.PE(inputFileString)

    Name = str((os.path.basename(inputFileString)))
    e_magic = int(pe.DOS_HEADER.e_magic)
    e_cblp = int(pe.DOS_HEADER.e_cblp)
    e_cp = int(pe.DOS_HEADER.e_cp)
    e_crlc = int(pe.DOS_HEADER.e_crlc)
    e_cparhdr = int(pe.DOS_HEADER.e_cparhdr)
    e_minalloc = int(pe.DOS_HEADER.e_minalloc)  
    e_maxalloc = int(pe.DOS_HEADER.e_maxalloc)   
    e_ss = int(pe.DOS_HEADER.e_ss)  
    e_sp = int(pe.DOS_HEADER.e_sp) 
    e_csum = int(pe.DOS_HEADER.e_csum)   
    e_ip = int(pe.DOS_HEADER.e_ip)  
    e_cs = int(pe.DOS_HEADER.e_cs)  
    e_lfarlc = int(pe.DOS_HEADER.e_lfarlc)  
    e_ovno = int(pe.DOS_HEADER.e_ovno) 
    e_oemid = int(pe.DOS_HEADER.e_oemid)   
    e_oeminfo = int(pe.DOS_HEADER.e_oeminfo)  
    e_lfanew = int(pe.DOS_HEADER.e_lfanew)

    Machine = int(pe.FILE_HEADER.Machine)
    NumberOfSections = int(pe.FILE_HEADER.NumberOfSections)    
    PointerToSymbolTable = int(pe.FILE_HEADER.PointerToSymbolTable)  
    NumberOfSymbols = int(pe.FILE_HEADER.NumberOfSymbols)  
    SizeOfOptionalHeader = int(pe.FILE_HEADER.SizeOfOptionalHeader)  
    Characteristics = int(pe.FILE_HEADER.Characteristics)

    Magic = int(pe.OPTIONAL_HEADER.Magic)  
    MajorLinkerVersion = int(pe.OPTIONAL_HEADER.MajorLinkerVersion)    
    MinorLinkerVersion = int(pe.OPTIONAL_HEADER.MinorLinkerVersion)  
    SizeOfCode = int(pe.OPTIONAL_HEADER.SizeOfCode)   
    SizeOfInitializedData = int(pe.OPTIONAL_HEADER.SizeOfInitializedData)   
    SizeOfUninitializedData = int(pe.OPTIONAL_HEADER.SizeOfUninitializedData)  
    AddressOfEntryPoint = int(pe.OPTIONAL_HEADER.AddressOfEntryPoint)   
    BaseOfCode = int(pe.OPTIONAL_HEADER.BaseOfCode)    
    ImageBase = int(pe.OPTIONAL_HEADER.ImageBase)     
    SectionAlignment = int(pe.OPTIONAL_HEADER.SectionAlignment)    
    FileAlignment = int(pe.OPTIONAL_HEADER.FileAlignment)     
    MajorOperatingSystemVersion = int(pe.OPTIONAL_HEADER.MajorOperatingSystemVersion)   
    MinorOperatingSystemVersion = int(pe.OPTIONAL_HEADER.MinorOperatingSystemVersion)    
    MajorImageVersion = int(pe.OPTIONAL_HEADER.MajorImageVersion)    
    MinorImageVersion = int(pe.OPTIONAL_HEADER.MinorImageVersion)    
    MajorSubsystemVersion = int(pe.OPTIONAL_HEADER.MajorSubsystemVersion)    
    MinorSubsystemVersion = int(pe.OPTIONAL_HEADER.MinorSubsystemVersion)     
    SizeOfHeaders = int(pe.OPTIONAL_HEADER.SizeOfHeaders)    
    CheckSum = int(pe.OPTIONAL_HEADER.CheckSum)    
    SizeOfImage = int(pe.OPTIONAL_HEADER.SizeOfImage)    
    Subsystem = int(pe.OPTIONAL_HEADER.Subsystem)     
    DllCharacteristics = int(pe.OPTIONAL_HEADER.DllCharacteristics)   
    SizeOfStackReserve = int(pe.OPTIONAL_HEADER.SizeOfStackReserve)    
    SizeOfStackCommit = int(pe.OPTIONAL_HEADER.SizeOfStackCommit)    
    SizeOfHeapReserve = int(pe.OPTIONAL_HEADER.SizeOfHeapReserve)   
    SizeOfHeapCommit = int(pe.OPTIONAL_HEADER.SizeOfHeapCommit)     
    LoaderFlags = int(pe.OPTIONAL_HEADER.LoaderFlags) 
    NumberOfRvaAndSizes = int(pe.OPTIONAL_HEADER.NumberOfRvaAndSizes) 

    data = {
            "Inputs": {
                    "input1":
                    [
                        {
                                'Name': Name,   
                                'e_magic': e_magic,   
                                'e_cblp': e_cblp,   
                                'e_cp': e_cp,   
                                'e_crlc': e_crlc,   
                                'e_cparhdr': e_cparhdr,   
                                'e_minalloc': e_minalloc,   
                                'e_maxalloc': e_maxalloc,   
                                'e_ss': e_ss,   
                                'e_sp': e_sp,   
                                'e_csum': e_csum,   
                                'e_ip': e_ip,   
                                'e_cs': e_cs,   
                                'e_lfarlc': e_lfarlc,   
                                'e_ovno': e_ovno,   
                                'e_oemid': e_oemid,   
                                'e_oeminfo': e_oeminfo,   
                                'e_lfanew': e_lfanew,   
                                'Machine': Machine,   
                                'NumberOfSections': NumberOfSections,   
                                'TimeDateStamp': "0",   
                                'PointerToSymbolTable': PointerToSymbolTable,   
                                'NumberOfSymbols': NumberOfSymbols,   
                                'SizeOfOptionalHeader': SizeOfOptionalHeader,   
                                'Characteristics': Characteristics,   
                                'Magic': Magic,   
                                'MajorLinkerVersion': MajorLinkerVersion,   
                                'MinorLinkerVersion': MinorLinkerVersion,   
                                'SizeOfCode': SizeOfCode,   
                                'SizeOfInitializedData': SizeOfInitializedData,   
                                'SizeOfUninitializedData': SizeOfUninitializedData,   
                                'AddressOfEntryPoint': AddressOfEntryPoint,   
                                'BaseOfCode': BaseOfCode,   
                                'ImageBase': ImageBase,   
                                'SectionAlignment': SectionAlignment,   
                                'FileAlignment': FileAlignment,   
                                'MajorOperatingSystemVersion': MajorOperatingSystemVersion,   
                                'MinorOperatingSystemVersion': MinorOperatingSystemVersion,   
                                'MajorImageVersion': MajorImageVersion,   
                                'MinorImageVersion': MinorImageVersion,   
                                'MajorSubsystemVersion': MajorSubsystemVersion,   
                                'MinorSubsystemVersion': MinorSubsystemVersion,   
                                'SizeOfHeaders': SizeOfHeaders,   
                                'CheckSum': CheckSum,   
                                'SizeOfImage': SizeOfImage,   
                                'Subsystem': Subsystem,   
                                'DllCharacteristics': DllCharacteristics,   
                                'SizeOfStackReserve': SizeOfStackReserve,   
                                'SizeOfStackCommit': SizeOfStackCommit,   
                                'SizeOfHeapReserve': SizeOfHeapReserve,   
                                'SizeOfHeapCommit': SizeOfHeapCommit,   
                                'LoaderFlags': LoaderFlags,   
                                'NumberOfRvaAndSizes': NumberOfRvaAndSizes,
                                'SuspiciousImportFunctions': "0",   
                                'SuspiciousNameSection': "0",   
                                'SectionsLength': "0",   
                                'SectionMinEntropy': "0",   
                                'SectionMaxEntropy': "0",   
                                'SectionMinRawsize': "0",   
                                'SectionMaxRawsize': "0",   
                                'SectionMinVirtualsize': "0",   
                                'SectionMaxVirtualsize': "0",   
                                'SectionMaxPhysical': "0",   
                                'SectionMinPhysical': "0",   
                                'SectionMaxVirtual': "0",   
                                'SectionMinVirtual': "0",   
                                'SectionMaxPointerData': "0",   
                                'SectionMinPointerData': "0",   
                                'SectionMaxChar': "0",   
                                'SectionMainChar': "0",   
                                'DirectoryEntryImport': "0",   
                                'DirectoryEntryImportSize': "0",   
                                'DirectoryEntryExport': "0",   
                                'ImageDirectoryEntryExport': "0",   
                                'ImageDirectoryEntryImport': "0",   
                                'ImageDirectoryEntryResource': "0",   
                                'ImageDirectoryEntryException': "0",   
                                'ImageDirectoryEntrySecurity': "0",   
                        }
                    ],
            },
        "GlobalParameters":  {
        }
    }

    body = str.encode(json.dumps(data))

    url = 'https://ussouthcentral.services.azureml.net/workspaces/80a5715d3a1c4c4b92c7bd2ceee62c15/services/b40e9a9d157f4f93ae277a3d361c1f32/execute?api-version=2.0&format=swagger'
    api_key = 'Vl7hoB2gZ5gWZOZehtQW0JPevtkSRKLGg/tor1Lwqyj1D/0DIBZAYGMMUL0eb4gOWo0lARMCIUi+r5WpQDxpKA=='
    headers = {'Content-Type':'application/json', 'Authorization':('Bearer '+ api_key)}

    req = urllib.request.Request(url, body, headers)

    try:
        response = urllib.request.urlopen(req)
        result = response.read()
        data = json.loads(result)
        print('succeeded,data,' + data['Results']['output1'][0]['Scored Probabilities'] + ',' + data['Results']['output1'][0]['Scored Labels'])

    except urllib.error.HTTPError as error:
        print('failed,server,' + error)
    
except pefile.PEFormatError:
    print('failed,file,nopeheader')

except IOError:
    print('failed,file,nopermission')

except Exception as error:
    print('failed,file,others,' + error)
