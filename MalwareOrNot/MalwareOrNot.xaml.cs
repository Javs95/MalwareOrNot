using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using Microsoft.Win32;

namespace MalwareOrNot
{
    /// <summary>
    /// Lógica de interacción para MalwareOrNot.xaml
    /// </summary>
    public partial class Main : Window
    {
        public Main()
        {
            InitializeComponent();

            SuspiciousFiles = new List<FileData>();
            FilteredFiles = new List<FileData>();

            ClassifierLoadingAnimation = this.FindResource("ClassifierWorkingAnimation") as Storyboard;
        }

        private void Exit_Click(object sender, RoutedEventArgs e)
        {
            Environment.Exit(0);
        }

        private void Minimize_Click(object sender, RoutedEventArgs e)
        {
            System.Windows.Application.Current.MainWindow.WindowState = WindowState.Minimized;
        }

        private void Fullscreen_Activated(object sender, EventArgs e)
        {
            Borders.Visibility = Visibility.Visible;
            MalwareOrNotSplitter.Opacity = 1;
        }

        private void Fullscreen_Deactivated(object sender, EventArgs e)
        {
            Borders.Visibility = Visibility.Hidden;
            MalwareOrNotSplitter.Opacity = 0.75;
        }

        private List<FileData> SuspiciousFiles;

        private List<FileData> FilteredFiles;

        private BitmapImage LoadImage(string filename)
        {
            return new BitmapImage(new Uri("pack://application:,,,/" + filename));
        }

        public class FileData
        {
            public int Id { get; set; }

            public BitmapImage ImageData { get; set; }

            public string Status { get; set; }

            public string Filename { get; set; }

            public string Path { get; set; }

            public string Annotations { get; set; }
        }

        private int SuspiciousFilesCounter = 0;

        private int FilteredFilesCounter = 0;
    
        private bool isPaused = false;
        
        private Storyboard ClassifierLoadingAnimation;

        private void StartProcess_Click(object sender, RoutedEventArgs e)
        {
            StartProcess.IsEnabled = false;
            PauseProcess.IsEnabled = true;
            StopProcess.IsEnabled = true;

            AddFiles.IsEnabled = false;
            AddDirectories.IsEnabled = false;

            if (isPaused)
            {
                isPaused = false;
                ClassifierLoadingAnimation.Resume();
            }
            else
            {
                isActivated = true;

                Thread AnalysisProcessThread = new Thread(new ThreadStart(AnalysisProcess));
                AnalysisProcessThread.Start();

                ClassifierLoadingAnimation.Begin();

                FilteredFilesList.Visibility = Visibility.Hidden;
                SuspiciousFilesList.Visibility = Visibility.Visible;

                toggleNotifications = false;
            }

            var brush = new ImageBrush();
            brush.ImageSource = LoadImage("Resources/Images/Stop.png");
            StopProcess.Background = brush;
        }

        private bool isActivated = false;

        private int currentSuspiciousListIndex = 0;

        private void AnalysisProcess()
        {
            try
            {
                while (isActivated == true)
                {
                    FileData pathData = (FileData)SuspiciousFilesList.Items[currentSuspiciousListIndex];
                    string filePath = pathData.Path;

                    Dispatcher.BeginInvoke(new Action(delegate ()
                    {
                        pathData.Status = "Processing...";
                        pathData.ImageData = LoadImage("Resources/Images/YellowDot.png");
                        pathData.Annotations = "Waiting for the result...";

                        SuspiciousFilesList.Items.Refresh();

                        SuspiciousFilesList.SelectedIndex = currentSuspiciousListIndex;
                        SuspiciousFilesList.ScrollIntoView(SuspiciousFilesList.SelectedItem);
                    }));

                    using (Process process = new Process())
                    {
                        process.StartInfo.FileName = "python.exe";
                        process.StartInfo.Arguments = "reqres_api.py " + filePath.Replace(" ", "%20");
                        process.StartInfo.UseShellExecute = false;
                        process.StartInfo.RedirectStandardOutput = true;
                        process.StartInfo.CreateNoWindow = true;
                        process.StartInfo.Verb = "runas";
                        process.Start();

                        string Output = "";

                        while (!process.StandardOutput.EndOfStream)
                        {
                            Output = process.StandardOutput.ReadLine();
                        }

                        process.WaitForExit();

                        while (isPaused == true) { }

                        string[] receivedData = Output.Split(',');

                        if(receivedData[0] == "succeeded") // if it was succeeded...
                        {
                            // Updating data in the Listview.

                            if(int.Parse(receivedData[3]) == 1) // Malware
                            {
                                Dispatcher.BeginInvoke(new Action(delegate ()
                                {
                                    pathData.Status = "Done";
                                    pathData.ImageData = LoadImage("Resources/Images/RedDot.png");
                                    pathData.Annotations = "Malicious executable. Probability: " + receivedData[2];
                                }));
                            }
                            else // Not malware
                            {
                                Dispatcher.BeginInvoke(new Action(delegate ()
                                {
                                    pathData.Status = "Done";
                                    pathData.ImageData = LoadImage("Resources/Images/GreenDot.png");
                                    pathData.Annotations = "Benign executable. Probability: " + receivedData[2];
                                }));
                            }
                        }
                        else if(receivedData[0] == "failed") // if it was "failed"...
                        {
                            if(receivedData[1] == "server") // ...because of the server
                            {
                                Dispatcher.BeginInvoke(new Action(delegate ()
                                {
                                    pathData.Status = "Done";
                                    pathData.ImageData = LoadImage("Resources/Images/GreyDot.png");
                                    pathData.Annotations = "Server error. Details: " + receivedData[2];
                                }));
                            }
                            else // ...because of the "file" = tag name
                            {
                                if(receivedData[2] == "nopeheader")
                                {
                                    Dispatcher.BeginInvoke(new Action(delegate ()
                                    {
                                        pathData.Status = "Done";
                                        pathData.ImageData = LoadImage("Resources/Images/GreyDot.png");
                                        pathData.Annotations = "Not an executable. The file does not contains a PE header.";
                                    }));
                                }
                                else if(receivedData[2] == "nopermission")
                                {
                                    Dispatcher.BeginInvoke(new Action(delegate ()
                                    {
                                        pathData.Status = "Skipped";
                                        pathData.ImageData = LoadImage("Resources/Images/YellowDot.png");
                                        pathData.Annotations = "Unable to read the file due to user privileges.";
                                    }));
                                }
                                else // failed,file,others,ERROR_DESCRIPTION
                                {
                                    Dispatcher.BeginInvoke(new Action(delegate ()
                                    {
                                        pathData.Status = "Skipped";
                                        pathData.ImageData = LoadImage("Resources/Images/YellowDot.png");
                                        pathData.Annotations = receivedData[3];
                                    }));
                                }
                            }
                        }
                        else // if you wanted to debug a received data. FORMAT:        debug,ERROR_DESCRIPTION
                        {
                            try
                            {
                                MessageBox.Show("Standard output result: " + receivedData[1], "Debugger", MessageBoxButton.OK, MessageBoxImage.Information);
                            }
                            catch(Exception e)
                            {
                                if(e is IndexOutOfRangeException)
                                {
                                    Dispatcher.BeginInvoke(new Action(delegate ()
                                    {
                                        pathData.Status = "Skipped";
                                        pathData.ImageData = LoadImage("Resources/Images/YellowDot.png");
                                        pathData.Annotations = "Unable to reach the file. Verify the access to it.";
                                    }));
                                }
                                else
                                {
                                    MessageBox.Show(e.ToString(), "Unidentified exception", MessageBoxButton.OK, MessageBoxImage.Information);
                                    Environment.Exit(0);
                                }
                            }
                        }
                        Dispatcher.BeginInvoke(new Action(delegate ()
                        {
                            SuspiciousFilesList.Items.Refresh();
                        }));
                    }

                    currentSuspiciousListIndex++;

                    if (currentSuspiciousListIndex == SuspiciousFilesCounter)
                    {
                        Dispatcher.BeginInvoke(new Action(delegate ()
                        {
                            StartProcess.IsEnabled = false;
                            PauseProcess.IsEnabled = false;
                            StopProcess.IsEnabled = true;

                            isPaused = false;

                            SuspiciousFilesCounter = 0;

                            FilteredFilesCounter = 0;

                            currentSuspiciousListIndex = 0;

                            ClassifierLoadingAnimation.Stop();

                            isActivated = false;

                            ShowingLabelStatus.Text = "Suspicious files.";

                            var brush = new ImageBrush();
                            brush.ImageSource = LoadImage("Resources/Images/Delete.png");
                            StopProcess.Background = brush;
                        }));

                        MessageBox.Show("Process finished!", "Notification", MessageBoxButton.OK, MessageBoxImage.Information);

                        break;
                    }
                }
            }
            catch(Exception e)
            {
                if(e is System.ArgumentOutOfRangeException)
                {
                    // Just ignore to keep going.
                }
                else
                {
                    MessageBox.Show(e.ToString(), "Unidentified exception", MessageBoxButton.OK, MessageBoxImage.Information);
                    Environment.Exit(0);
                }
            }
        }

        private void PauseProcess_Click(object sender, RoutedEventArgs e)
        {
            StartProcess.IsEnabled = true;
            PauseProcess.IsEnabled = false;

            isPaused = true;

            ClassifierLoadingAnimation.Pause();
        }

        private void StopProcess_Click(object sender, RoutedEventArgs e)
        {
            if (isActivated)
            {
                ClassifierLoadingAnimation.Stop();

                var brush = new ImageBrush();
                brush.ImageSource = LoadImage("Resources/Images/Delete.png");
                StopProcess.Background = brush;

                StartProcess.IsEnabled = false;
                PauseProcess.IsEnabled = false;
                StopProcess.IsEnabled = true;
            }
            else
            {
                SuspiciousFiles.Clear();
                SuspiciousFilesList.Items.Refresh();

                FilteredFiles.Clear();
                FilteredFilesList.Items.Refresh();

                AddFiles.IsEnabled = true;
                AddDirectories.IsEnabled = true;

                var brush = new ImageBrush();
                brush.ImageSource = LoadImage("Resources/Images/Stop.png");
                StopProcess.Background = brush;

                StartProcess.IsEnabled = false;
                PauseProcess.IsEnabled = false;
                StopProcess.IsEnabled = false;
            }

            FilteredFilesList.Visibility = Visibility.Hidden;
            SuspiciousFilesList.Visibility = Visibility.Visible;

            ShowingLabelStatus.Text = "Suspicious files.";

            SuspiciousFilesCounter = 0;
            FilteredFilesCounter = 0;
            currentSuspiciousListIndex = 0;

            ToggleNotifications.IsEnabled = false;

            isActivated = false;
            isPaused = false;
        }

        private bool toggleNotifications = false;

        private void ToggleNotifications_Click(object sender, RoutedEventArgs e)
        {
            if (!toggleNotifications)
            {
                
                FilteredFilesList.Visibility = Visibility.Visible;
                SuspiciousFilesList.Visibility = Visibility.Hidden;
                ShowingLabelStatus.Text = "Filtered files.";
            }
            else
            {
                FilteredFilesList.Visibility = Visibility.Hidden;
                SuspiciousFilesList.Visibility = Visibility.Visible;
                ShowingLabelStatus.Text = "Suspicious files.";
            }
            toggleNotifications = !toggleNotifications;
        }

        private void AddFiles_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                OpenFileDialog openFileDialog = new OpenFileDialog();
                openFileDialog.Multiselect = true;
                openFileDialog.Filter = "All files (*.*)|*.*";
                openFileDialog.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);

                if (openFileDialog.ShowDialog() == true)
                {
                    var IncomingFiles = openFileDialog.FileNames;

                    if (SuspiciousFilesList.Items.Count == 0)
                    {
                        foreach (string File in IncomingFiles)
                        {
                            SuspiciousFilesCounter++;
                            SuspiciousFiles.Add((new FileData() { Id = SuspiciousFilesCounter, ImageData = LoadImage("Resources/Images/GreyDot.png"), Status = "Ready", Filename = System.IO.Path.GetFileName(File), Path = System.IO.Path.GetFullPath(File), Annotations = "Waiting to be scanned..." }));
                        }
                    }
                    else
                    {
                        bool alreadyExistsInSuspiciousFiles = false;

                        bool alreadyExistsInFilteredFiles = false;

                        foreach (string File in IncomingFiles)
                        {
                            foreach (var Item in SuspiciousFiles)
                            {
                                if (Item.Path == System.IO.Path.GetFullPath(File))
                                {
                                    alreadyExistsInSuspiciousFiles = true;
                                }
                            }
                            if (!alreadyExistsInSuspiciousFiles)
                            {
                                SuspiciousFilesCounter++;
                                SuspiciousFiles.Add((new FileData() { Id = SuspiciousFilesCounter, ImageData = LoadImage("Resources/Images/GreyDot.png"), Status = "Ready", Filename = System.IO.Path.GetFileName(File), Path = System.IO.Path.GetFullPath(File), Annotations = "Waiting to be scanned..." }));
                            }
                            else
                            {
                                foreach (var Item in FilteredFiles)
                                {
                                    if (Item.Path == System.IO.Path.GetFullPath(File))
                                    {
                                        alreadyExistsInFilteredFiles = true;
                                    }
                                }
                                if (!alreadyExistsInFilteredFiles)
                                {
                                    FilteredFilesCounter++;
                                    FilteredFiles.Add((new FileData() { Id = FilteredFilesCounter, Filename = System.IO.Path.GetFileName(File), Path = System.IO.Path.GetFullPath(File), Annotations = "The file was already in the queue." }));
                                }
                            }
                            alreadyExistsInSuspiciousFiles = false;
                            alreadyExistsInFilteredFiles = false;
                        }
                    }

                    if (SuspiciousFilesCounter > 0)
                    {
                        StartProcess.IsEnabled = true;
                        StopProcess.IsEnabled = true;
                    }

                    if (FilteredFilesCounter > 0)
                    {
                        ToggleNotifications.IsEnabled = true;
                    }

                    var brush = new ImageBrush();
                    brush.ImageSource = LoadImage("Resources/Images/Delete.png");
                    StopProcess.Background = brush;

                    StopProcess.IsEnabled = true;

                    toggleNotifications = false;

                    SuspiciousFilesList.ItemsSource = SuspiciousFiles;
                    SuspiciousFilesList.Items.Refresh();

                    FilteredFilesList.ItemsSource = FilteredFiles;
                    FilteredFilesList.Items.Refresh();
                }
            }
            catch (Exception ex)
            {
                if (ex is UnauthorizedAccessException)
                {
                    MessageBox.Show("You have no permission to work with some of the files selected due to user privileges.\r\n\r\nPlease, select a more specific group of files.", "Critical exception", MessageBoxButton.OK, MessageBoxImage.Information);
                }
                else
                {
                    MessageBox.Show(ex.ToString(), "Unhandled exception", MessageBoxButton.OK, MessageBoxImage.Information);
                    Environment.Exit(0);
                }
            }
        }

        private void AddDirectories_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                using (var folderBrowserDialog = new System.Windows.Forms.FolderBrowserDialog())
                {
                    folderBrowserDialog.Description = "\r\nChoose a directory:";
                    System.Windows.Forms.DialogResult result = folderBrowserDialog.ShowDialog();

                    if (result == System.Windows.Forms.DialogResult.OK && !string.IsNullOrWhiteSpace(folderBrowserDialog.SelectedPath))
                    {
                        string[] IncomingFiles;
                        if (MessageBox.Show("If the selected directory has subdirectories, do you want to include them?", "Malware Or Not?", MessageBoxButton.YesNo, MessageBoxImage.Question) == MessageBoxResult.Yes)
                        {
                            IncomingFiles = Directory.GetFiles(folderBrowserDialog.SelectedPath, "*.*", SearchOption.AllDirectories);
                        }
                        else
                        {
                            IncomingFiles = Directory.GetFiles(folderBrowserDialog.SelectedPath, "*.*");
                        }

                        if (SuspiciousFilesList.Items.Count == 0)
                        {
                            foreach (string File in IncomingFiles)
                            {
                                SuspiciousFilesCounter++;
                                SuspiciousFiles.Add((new FileData() { Id = SuspiciousFilesCounter, ImageData = LoadImage("Resources/Images/GreyDot.png"), Status = "Ready", Filename = System.IO.Path.GetFileName(File), Path = System.IO.Path.GetFullPath(File), Annotations = "Waiting to be scanned..." }));
                            }
                        }
                        else
                        {
                            bool alreadyExistsInSuspiciousFiles = false;

                            bool alreadyExistsInFilteredFiles = false;

                            foreach (string File in IncomingFiles)
                            {
                                foreach (var Item in SuspiciousFiles)
                                {
                                    if (Item.Path == System.IO.Path.GetFullPath(File))
                                    {
                                        alreadyExistsInSuspiciousFiles = true;
                                    }
                                }
                                if (!alreadyExistsInSuspiciousFiles)
                                {
                                    SuspiciousFilesCounter++;
                                    SuspiciousFiles.Add((new FileData() { Id = SuspiciousFilesCounter, ImageData = LoadImage("Resources/Images/GreyDot.png"), Status = "Ready", Filename = System.IO.Path.GetFileName(File), Path = System.IO.Path.GetFullPath(File), Annotations = "Waiting to be scanned..." }));
                                }
                                else
                                {
                                    foreach (var Item in FilteredFiles)
                                    {
                                        if (Item.Path == System.IO.Path.GetFullPath(File))
                                        {
                                            alreadyExistsInFilteredFiles = true;
                                        }
                                    }
                                    if (!alreadyExistsInFilteredFiles)
                                    {
                                        FilteredFilesCounter++;
                                        FilteredFiles.Add((new FileData() { Id = FilteredFilesCounter, Filename = System.IO.Path.GetFileName(File), Path = System.IO.Path.GetFullPath(File), Annotations = "The file was already in the queue." }));
                                    }
                                }
                                alreadyExistsInSuspiciousFiles = false;
                                alreadyExistsInFilteredFiles = false;
                            }
                        }

                        if (SuspiciousFilesCounter > 0)
                        {
                            StartProcess.IsEnabled = true;
                            StopProcess.IsEnabled = true;
                        }

                        if (FilteredFilesCounter > 0)
                        {
                            ToggleNotifications.IsEnabled = true;
                        }

                        var brush = new ImageBrush();
                        brush.ImageSource = LoadImage("Resources/Images/Delete.png");
                        StopProcess.Background = brush;

                        StopProcess.IsEnabled = true;

                        toggleNotifications = false;

                        SuspiciousFilesList.ItemsSource = SuspiciousFiles;
                        SuspiciousFilesList.Items.Refresh();

                        FilteredFilesList.ItemsSource = FilteredFiles;
                        FilteredFilesList.Items.Refresh();
                    }
                }
            }
            catch (Exception ex)
            {
                if(ex is UnauthorizedAccessException)
                {
                    MessageBox.Show("You have no permission to work with some of the directories selected due to user privileges.\r\n\r\nPlease, select a more specific group of files.", "Critical exception", MessageBoxButton.OK, MessageBoxImage.Information);
                }
                else
                {
                    MessageBox.Show(ex.ToString(), "Unhandled exception", MessageBoxButton.OK, MessageBoxImage.Information);
                    Environment.Exit(0);
                }
            }
        }
    }
}